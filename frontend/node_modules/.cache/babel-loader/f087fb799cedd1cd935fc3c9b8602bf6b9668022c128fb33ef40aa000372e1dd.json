{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Monica\\\\Downloads\\\\product-form-altibbe\\\\frontend\\\\src\\\\components\\\\Chatbot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport MessageComponent from './Message';\nimport { generateQuestion, getProductReport, listAllProducts } from '../api/chat';\nimport './components/Chatbot.css'; // Create this CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: \"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\"\n  }]);\n  const [userInput, setUserInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [currentProductId, setCurrentProductId] = useState(null);\n  const [allProducts, setAllProducts] = useState([]);\n  const messagesEndRef = useRef(null);\n\n  // Scroll to bottom of messages\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  useEffect(() => {\n    // Load existing products on component mount\n    const fetchProducts = async () => {\n      try {\n        const products = await listAllProducts();\n        setAllProducts(products);\n      } catch (err) {\n        setError(err.message);\n      }\n    };\n    fetchProducts();\n  }, []);\n  const sendMessage = async () => {\n    const userText = userInput.trim();\n    if (userText === '') return;\n\n    // Add user message to UI\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'user',\n      text: userText\n    }]);\n    setUserInput('');\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await generateQuestion(userText, currentProductId);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: response.question.text\n      }]);\n      setCurrentProductId(response.productId); // Update current product ID\n\n      // Optionally, update the local list of products (for immediate display)\n      // You might want to refetch all products or update a specific one\n      // For now, let's just refetch all to keep it simple.\n      const updatedProducts = await listAllProducts();\n      setAllProducts(updatedProducts);\n    } catch (err) {\n      setError(err.message);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: `Oops! Something went wrong: ${err.message}. Please try again.`\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !isLoading) {\n      sendMessage();\n    }\n  };\n  const viewProductReport = async productId => {\n    try {\n      const product = await getProductReport(productId);\n      // Display the report in a modal or new section\n      alert(`Product Report for ${product.initialDescription}:\\n\\n` + product.details.map(d => `- ${d.question}: ${d.answer} (Score: ${d.transparencyScore})`).join('\\n'));\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  const loadExistingProduct = async product => {\n    setCurrentProductId(product._id);\n    // Clear existing chat and load product's chat history\n    const initialBotMessage = {\n      sender: 'bot',\n      text: \"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\"\n    };\n    let newMessages = [initialBotMessage, {\n      sender: 'user',\n      text: product.initialDescription\n    }];\n    for (const detail of product.details) {\n      // Reconstruct the bot's question and the user's answer\n      newMessages.push({\n        sender: 'bot',\n        text: detail.question\n      });\n      newMessages.push({\n        sender: 'user',\n        text: detail.answer\n      });\n    }\n    setMessages(newMessages);\n\n    // Fetch the next question for this loaded product\n    // This will effectively continue the conversation from where it left off.\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Pass an empty string as userInput to just trigger the next question generation\n      // The backend will use the stored history for the specific product ID.\n      const response = await generateQuestion(\"\", product._id);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: response.question.text\n      }]);\n      // No need to update currentProductId as it's already set\n    } catch (err) {\n      setError(err.message);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: `Oops! Something went wrong loading: ${err.message}. Please try again.`\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-list-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Existing Products\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: allProducts.map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => loadExistingProduct(product),\n            children: product.initialDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"report-btn\",\n            onClick: () => viewProductReport(product._id),\n            children: \"View Report\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this)]\n        }, product._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Product Form Bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), currentProductId && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"current-product-id\",\n          children: [\"Product ID: \", currentProductId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(MessageComponent, {\n          message: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(MessageComponent, {\n          message: {\n            sender: 'bot',\n            text: 'Generating question...'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"userInput\",\n          placeholder: \"Type your product description/answer here...\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          onKeyPress: handleKeyPress,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"sendBtn\",\n          onClick: sendMessage,\n          disabled: isLoading,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        style: {\n          display: 'block'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"eUqjqyZX05XrRjskpffO0gvPF9c=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MessageComponent","generateQuestion","getProductReport","listAllProducts","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","userInput","setUserInput","isLoading","setIsLoading","error","setError","currentProductId","setCurrentProductId","allProducts","setAllProducts","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","fetchProducts","products","err","message","sendMessage","userText","trim","prevMessages","response","question","productId","updatedProducts","handleKeyPress","e","key","viewProductReport","product","alert","initialDescription","details","map","d","answer","transparencyScore","join","loadExistingProduct","_id","initialBotMessage","newMessages","detail","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","msg","index","ref","type","id","placeholder","value","onChange","target","onKeyPress","disabled","style","display","_c","$RefreshReg$"],"sources":["C:/Users/Monica/Downloads/product-form-altibbe/frontend/src/components/Chatbot.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport MessageComponent from './Message';\r\nimport { Message, Product, ChatResponse } from '../types';\r\nimport { generateQuestion, getProductReport, listAllProducts } from '../api/chat';\r\nimport './components/Chatbot.css'; // Create this CSS file\r\n\r\nconst Chatbot: React.FC = () => {\r\n    const [messages, setMessages] = useState<Message[]>([\r\n        { sender: 'bot', text: \"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\" }\r\n    ]);\r\n    const [userInput, setUserInput] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [currentProductId, setCurrentProductId] = useState<string | null>(null);\r\n    const [allProducts, setAllProducts] = useState<Product[]>([]);\r\n    const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n    // Scroll to bottom of messages\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        // Load existing products on component mount\r\n        const fetchProducts = async () => {\r\n            try {\r\n                const products = await listAllProducts();\r\n                setAllProducts(products);\r\n            } catch (err: any) {\r\n                setError(err.message);\r\n            }\r\n        };\r\n        fetchProducts();\r\n    }, []);\r\n\r\n    const sendMessage = async () => {\r\n        const userText = userInput.trim();\r\n        if (userText === '') return;\r\n\r\n        // Add user message to UI\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'user', text: userText }]);\r\n        setUserInput('');\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const response: ChatResponse = await generateQuestion(userText, currentProductId);\r\n\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: response.question.text }]);\r\n            setCurrentProductId(response.productId); // Update current product ID\r\n\r\n            // Optionally, update the local list of products (for immediate display)\r\n            // You might want to refetch all products or update a specific one\r\n            // For now, let's just refetch all to keep it simple.\r\n            const updatedProducts = await listAllProducts();\r\n            setAllProducts(updatedProducts);\r\n\r\n        } catch (err: any) {\r\n            setError(err.message);\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `Oops! Something went wrong: ${err.message}. Please try again.` }]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && !isLoading) {\r\n            sendMessage();\r\n        }\r\n    };\r\n\r\n    const viewProductReport = async (productId: string) => {\r\n        try {\r\n            const product = await getProductReport(productId);\r\n            // Display the report in a modal or new section\r\n            alert(`Product Report for ${product.initialDescription}:\\n\\n` +\r\n                  product.details.map((d:any) => `- ${d.question}: ${d.answer} (Score: ${d.transparencyScore})`).join('\\n')\r\n            );\r\n        } catch (err: any) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n    const loadExistingProduct = async (product: Product) => {\r\n        setCurrentProductId(product._id);\r\n        // Clear existing chat and load product's chat history\r\n        const initialBotMessage = { sender: 'bot', text: \"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\" };\r\n        let newMessages: Message[] = [initialBotMessage, { sender: 'user', text: product.initialDescription }];\r\n\r\n        for (const detail of product.details) {\r\n            // Reconstruct the bot's question and the user's answer\r\n            newMessages.push({ sender: 'bot', text: detail.question });\r\n            newMessages.push({ sender: 'user', text: detail.answer });\r\n        }\r\n        setMessages(newMessages);\r\n\r\n        // Fetch the next question for this loaded product\r\n        // This will effectively continue the conversation from where it left off.\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n             // Pass an empty string as userInput to just trigger the next question generation\r\n             // The backend will use the stored history for the specific product ID.\r\n            const response: ChatResponse = await generateQuestion(\"\", product._id);\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: response.question.text }]);\r\n            // No need to update currentProductId as it's already set\r\n        } catch (err: any) {\r\n            setError(err.message);\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `Oops! Something went wrong loading: ${err.message}. Please try again.` }]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <div className=\"product-list-panel\">\r\n                <h3>Existing Products</h3>\r\n                <ul>\r\n                    {allProducts.map((product) => (\r\n                        <li key={product._id}>\r\n                            <button onClick={() => loadExistingProduct(product)}>{product.initialDescription}</button>\r\n                            <button className=\"report-btn\" onClick={() => viewProductReport(product._id)}>View Report</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"chat-panel\">\r\n                <div className=\"chatbot-header\">\r\n                    <h2>Product Form Bot</h2>\r\n                    {currentProductId && <p className=\"current-product-id\">Product ID: {currentProductId}</p>}\r\n                </div>\r\n                <div className=\"chatbot-messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <MessageComponent key={index} message={msg} />\r\n                    ))}\r\n                    {isLoading && <MessageComponent message={{ sender: 'bot', text: 'Generating question...' }} />}\r\n                    <div ref={messagesEndRef} />\r\n                </div>\r\n                <div className=\"chatbot-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"userInput\"\r\n                        placeholder=\"Type your product description/answer here...\"\r\n                        value={userInput}\r\n                        onChange={(e) => setUserInput(e.target.value)}\r\n                        onKeyPress={handleKeyPress}\r\n                        disabled={isLoading}\r\n                    />\r\n                    <button id=\"sendBtn\" onClick={sendMessage} disabled={isLoading}>\r\n                        Send\r\n                    </button>\r\n                </div>\r\n                {error && <div className=\"error-message\" style={{ display: 'block' }}>{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}