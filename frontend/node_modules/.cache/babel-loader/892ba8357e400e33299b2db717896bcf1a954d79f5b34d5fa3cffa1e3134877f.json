{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Monica\\\\Downloads\\\\altibbe\\\\my-prototype-altibbe\\\\frontend\\\\src\\\\components\\\\Chatbot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport MessageComponent from './Message.tsx';\nimport { generateQuestion, listAllProducts } from '../api/chat.ts';\n// @ts-ignore\nimport './Chatbot.css'; // Create this CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: \"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\"\n  }]);\n  const [userInput, setUserInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [currentProductId, setCurrentProductId] = useState(null);\n  const [allProducts, setAllProducts] = useState([]);\n  const messagesEndRef = useRef(null);\n\n  // Scroll to bottom of messages\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  useEffect(() => {\n    // Load existing products on component mount\n    const fetchProducts = async () => {\n      try {\n        const products = await listAllProducts();\n        setAllProducts(products);\n      } catch (err) {\n        setError(err.message);\n      }\n    };\n    fetchProducts();\n  }, []);\n  const sendMessage = async () => {\n    const userText = userInput.trim();\n    if (userText === '') return;\n\n    // Add user message to UI\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'user',\n      text: userText\n    }]);\n    setUserInput('');\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await generateQuestion(userText, currentProductId);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: response.question.text\n      }]);\n      setCurrentProductId(response.productId); // Update current product ID\n\n      // Optionally, update the local list of products (for immediate display)\n      // You might want to refetch all products or update a specific one\n      // For now, let's just refetch all to keep it simple.\n      const updatedProducts = await listAllProducts();\n      setAllProducts(updatedProducts);\n    } catch (err) {\n      setError(err.message);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: `Oops! Something went wrong: ${err.message}. Please try again.`\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !isLoading) {\n      sendMessage();\n    }\n  };\n  const viewProductReport = async productId => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // When calling getProductReport, expect a PDF blob, not JSON\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/products/${productId}`);\n      if (!response.ok) {\n        const errorText = await response.text(); // Get raw error text\n        throw new Error(`Failed to fetch report: ${errorText}`);\n      }\n      const blob = await response.blob(); // Get the response as a Blob (binary data)\n\n      // Create a temporary URL for the blob\n      const url = window.URL.createObjectURL(blob);\n\n      // Create a temporary link element\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `ProductReport-${productId}.pdf`; // Suggest a filename\n      document.body.appendChild(a); // Append to body (required for Firefox)\n      a.click(); // Programmatically click the link to trigger download\n\n      // Clean up: remove the link and revoke the URL\n      a.remove();\n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      console.error('Error fetching PDF report:', err);\n      setError(`Error generating PDF report: ${err.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const loadExistingProduct = async product => {\n    setCurrentProductId(product._id);\n    // Clear existing chat and load product's chat history\n    const initialBotMessage = {\n      sender: 'bot',\n      text: \"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\"\n    };\n    let newMessages = [initialBotMessage, {\n      sender: 'user',\n      text: product.initialDescription\n    }];\n    for (const detail of product.details) {\n      // Reconstruct the bot's question and the user's answer\n      newMessages.push({\n        sender: 'bot',\n        text: detail.question\n      });\n      newMessages.push({\n        sender: 'user',\n        text: detail.answer\n      });\n    }\n    setMessages(newMessages);\n\n    // Fetch the next question for this loaded product\n    // This will effectively continue the conversation from where it left off.\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Pass an empty string as userInput to just trigger the next question generation\n      // The backend will use the stored history for the specific product ID.\n      const response = await generateQuestion(\"\", product._id);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: response.question.text\n      }]);\n      // No need to update currentProductId as it's already set\n    } catch (err) {\n      setError(err.message);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: `Oops! Something went wrong loading: ${err.message}. Please try again.`\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-list-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Existing Products\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: allProducts.map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => loadExistingProduct(product),\n            children: product.initialDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"report-btn\",\n            onClick: () => viewProductReport(product._id),\n            children: \"View Report\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this)]\n        }, product._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Product Form Bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), currentProductId && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"current-product-id\",\n          children: [\"Product ID: \", currentProductId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(MessageComponent, {\n          message: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(MessageComponent, {\n          message: {\n            sender: 'bot',\n            text: 'Generating question...'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"userInput\",\n          placeholder: \"Type your product description/answer here...\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          onKeyPress: handleKeyPress,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"sendBtn\",\n          onClick: sendMessage,\n          disabled: isLoading,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        style: {\n          display: 'block'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"eUqjqyZX05XrRjskpffO0gvPF9c=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MessageComponent","generateQuestion","listAllProducts","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","userInput","setUserInput","isLoading","setIsLoading","error","setError","currentProductId","setCurrentProductId","allProducts","setAllProducts","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","fetchProducts","products","err","message","sendMessage","userText","trim","prevMessages","response","question","productId","updatedProducts","handleKeyPress","e","key","viewProductReport","fetch","process","env","REACT_APP_BACKEND_URL","ok","errorText","Error","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","remove","revokeObjectURL","console","loadExistingProduct","product","_id","initialBotMessage","newMessages","initialDescription","detail","details","push","answer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","msg","index","ref","type","id","placeholder","value","onChange","target","onKeyPress","disabled","style","display","_c","$RefreshReg$"],"sources":["C:/Users/Monica/Downloads/altibbe/my-prototype-altibbe/frontend/src/components/Chatbot.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport MessageComponent from './Message.tsx';\r\nimport { Message, Product, ChatResponse } from '../types';\r\nimport { generateQuestion, getProductReport, listAllProducts } from '../api/chat.ts';\r\n// @ts-ignore\r\nimport './Chatbot.css'; // Create this CSS file\r\n\r\nconst Chatbot: React.FC = () => {\r\n    const [messages, setMessages] = useState<Message[]>([\r\n        { sender: 'bot', text: \"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\" }\r\n    ]);\r\n    const [userInput, setUserInput] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [currentProductId, setCurrentProductId] = useState<string | null>(null);\r\n    const [allProducts, setAllProducts] = useState<Product[]>([]);\r\n    const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n    // Scroll to bottom of messages\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        // Load existing products on component mount\r\n        const fetchProducts = async () => {\r\n            try {\r\n                const products = await listAllProducts();\r\n                setAllProducts(products);\r\n            } catch (err: any) {\r\n                setError(err.message);\r\n            }\r\n        };\r\n        fetchProducts();\r\n    }, []);\r\n\r\n    const sendMessage = async () => {\r\n        const userText = userInput.trim();\r\n        if (userText === '') return;\r\n\r\n        // Add user message to UI\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'user', text: userText }]);\r\n        setUserInput('');\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const response: ChatResponse = await generateQuestion(userText, currentProductId);\r\n\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: response.question.text }]);\r\n            setCurrentProductId(response.productId); // Update current product ID\r\n\r\n            // Optionally, update the local list of products (for immediate display)\r\n            // You might want to refetch all products or update a specific one\r\n            // For now, let's just refetch all to keep it simple.\r\n            const updatedProducts = await listAllProducts();\r\n            setAllProducts(updatedProducts);\r\n\r\n        } catch (err: any) {\r\n            setError(err.message);\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `Oops! Something went wrong: ${err.message}. Please try again.` }]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && !isLoading) {\r\n            sendMessage();\r\n        }\r\n    };\r\n\r\n    const viewProductReport = async (productId: string) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            // When calling getProductReport, expect a PDF blob, not JSON\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/products/${productId}`);\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text(); // Get raw error text\r\n                throw new Error(`Failed to fetch report: ${errorText}`);\r\n            }\r\n\r\n            const blob = await response.blob(); // Get the response as a Blob (binary data)\r\n\r\n            // Create a temporary URL for the blob\r\n            const url = window.URL.createObjectURL(blob);\r\n\r\n            // Create a temporary link element\r\n            const a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = `ProductReport-${productId}.pdf`; // Suggest a filename\r\n            document.body.appendChild(a); // Append to body (required for Firefox)\r\n            a.click(); // Programmatically click the link to trigger download\r\n\r\n            // Clean up: remove the link and revoke the URL\r\n            a.remove();\r\n            window.URL.revokeObjectURL(url);\r\n\r\n        } catch (err: any) {\r\n            console.error('Error fetching PDF report:', err);\r\n            setError(`Error generating PDF report: ${err.message}`);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const loadExistingProduct = async (product: Product) => {\r\n        setCurrentProductId(product._id);\r\n        // Clear existing chat and load product's chat history\r\n        const initialBotMessage = { sender: 'bot', text: \"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\" };\r\n        let newMessages: Message[] = [initialBotMessage, { sender: 'user', text: product.initialDescription }];\r\n\r\n        for (const detail of product.details) {\r\n            // Reconstruct the bot's question and the user's answer\r\n            newMessages.push({ sender: 'bot', text: detail.question });\r\n            newMessages.push({ sender: 'user', text: detail.answer });\r\n        }\r\n        setMessages(newMessages);\r\n\r\n        // Fetch the next question for this loaded product\r\n        // This will effectively continue the conversation from where it left off.\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n             // Pass an empty string as userInput to just trigger the next question generation\r\n             // The backend will use the stored history for the specific product ID.\r\n            const response: ChatResponse = await generateQuestion(\"\", product._id);\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: response.question.text }]);\r\n            // No need to update currentProductId as it's already set\r\n        } catch (err: any) {\r\n            setError(err.message);\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `Oops! Something went wrong loading: ${err.message}. Please try again.` }]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <div className=\"product-list-panel\">\r\n                <h3>Existing Products</h3>\r\n                <ul>\r\n                    {allProducts.map((product) => (\r\n                        <li key={product._id}>\r\n                            <button onClick={() => loadExistingProduct(product)}>{product.initialDescription}</button>\r\n                            <button className=\"report-btn\" onClick={() => viewProductReport(product._id)}>View Report</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"chat-panel\">\r\n                <div className=\"chatbot-header\">\r\n                    <h2>Product Form Bot</h2>\r\n                    {currentProductId && <p className=\"current-product-id\">Product ID: {currentProductId}</p>}\r\n                </div>\r\n                <div className=\"chatbot-messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <MessageComponent key={index} message={msg} />\r\n                    ))}\r\n                    {isLoading && <MessageComponent message={{ sender: 'bot', text: 'Generating question...' }} />}\r\n                    <div ref={messagesEndRef} />\r\n                </div>\r\n                <div className=\"chatbot-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"userInput\"\r\n                        placeholder=\"Type your product description/answer here...\"\r\n                        value={userInput}\r\n                        onChange={(e) => setUserInput(e.target.value)}\r\n                        onKeyPress={handleKeyPress}\r\n                        disabled={isLoading}\r\n                    />\r\n                    <button id=\"sendBtn\" onClick={sendMessage} disabled={isLoading}>\r\n                        Send\r\n                    </button>\r\n                </div>\r\n                {error && <div className=\"error-message\" style={{ display: 'block' }}>{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}