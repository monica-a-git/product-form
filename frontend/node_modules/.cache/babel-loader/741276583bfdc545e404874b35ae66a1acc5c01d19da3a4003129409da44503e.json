{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:10000/api'; // Ensure this matches your backend port\n\nexport const generateQuestion = async (userInput, productId = null, sessionId = 'default_session_id' // A simple session ID for now\n) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/generate-question`, {\n      userInput,\n      productId\n    }, {\n      headers: {\n        'X-Session-ID': sessionId // Pass session ID in headers\n      }\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      throw new Error(error.response.data.error || 'Failed to generate question');\n    }\n    throw new Error('Network error or unexpected issue');\n  }\n};\nexport const getProductReport = async productId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/products/${productId}`);\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      throw new Error(error.response.data.error || 'Failed to fetch product report');\n    }\n    throw new Error('Network error or unexpected issue');\n  }\n};\nexport const listAllProducts = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/products`);\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      throw new Error(error.response.data.error || 'Failed to list products');\n    }\n    throw new Error('Network error or unexpected issue');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_BACKEND_URL","generateQuestion","userInput","productId","sessionId","response","post","headers","data","error","isAxiosError","Error","getProductReport","get","listAllProducts"],"sources":["C:/Users/Monica/Downloads/altibbe/my-prototype-altibbe/frontend/src/api/chat.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { ChatResponse } from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:10000/api'; // Ensure this matches your backend port\r\n\r\nexport const generateQuestion = async (\r\n    userInput: string,\r\n    productId: string | null = null,\r\n    sessionId: string = 'default_session_id' // A simple session ID for now\r\n): Promise<ChatResponse> => {\r\n    try {\r\n        const response = await axios.post<ChatResponse>(`${API_BASE_URL}/generate-question`, {\r\n            userInput,\r\n            productId,\r\n        }, {\r\n            headers: {\r\n                'X-Session-ID': sessionId, // Pass session ID in headers\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        if (axios.isAxiosError(error) && error.response) {\r\n            throw new Error(error.response.data.error || 'Failed to generate question');\r\n        }\r\n        throw new Error('Network error or unexpected issue');\r\n    }\r\n};\r\n\r\nexport const getProductReport = async (productId: string) => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/products/${productId}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        if (axios.isAxiosError(error) && error.response) {\r\n            throw new Error(error.response.data.error || 'Failed to fetch product report');\r\n        }\r\n        throw new Error('Network error or unexpected issue');\r\n    }\r\n};\r\n\r\nexport const listAllProducts = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/products`);\r\n        return response.data;\r\n    } catch (error) {\r\n        if (axios.isAxiosError(error) && error.response) {\r\n            throw new Error(error.response.data.error || 'Failed to list products');\r\n        }\r\n        throw new Error('Network error or unexpected issue');\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,4BAA4B,CAAC,CAAC;;AAExF,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAC5BC,SAAiB,EACjBC,SAAwB,GAAG,IAAI,EAC/BC,SAAiB,GAAG,oBAAoB,CAAC;AAAA,KACjB;EACxB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAe,GAAGT,YAAY,oBAAoB,EAAE;MACjFK,SAAS;MACTC;IACJ,CAAC,EAAE;MACCI,OAAO,EAAE;QACL,cAAc,EAAEH,SAAS,CAAE;MAC/B;IACJ,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,IAAIb,KAAK,CAACc,YAAY,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACJ,QAAQ,EAAE;MAC7C,MAAM,IAAIM,KAAK,CAACF,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAACC,KAAK,IAAI,6BAA6B,CAAC;IAC/E;IACA,MAAM,IAAIE,KAAK,CAAC,mCAAmC,CAAC;EACxD;AACJ,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAOT,SAAiB,IAAK;EACzD,IAAI;IACA,MAAME,QAAQ,GAAG,MAAMT,KAAK,CAACiB,GAAG,CAAC,GAAGhB,YAAY,aAAaM,SAAS,EAAE,CAAC;IACzE,OAAOE,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,IAAIb,KAAK,CAACc,YAAY,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACJ,QAAQ,EAAE;MAC7C,MAAM,IAAIM,KAAK,CAACF,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAACC,KAAK,IAAI,gCAAgC,CAAC;IAClF;IACA,MAAM,IAAIE,KAAK,CAAC,mCAAmC,CAAC;EACxD;AACJ,CAAC;AAED,OAAO,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMT,KAAK,CAACiB,GAAG,CAAC,GAAGhB,YAAY,WAAW,CAAC;IAC5D,OAAOQ,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,IAAIb,KAAK,CAACc,YAAY,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACJ,QAAQ,EAAE;MAC7C,MAAM,IAAIM,KAAK,CAACF,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAACC,KAAK,IAAI,yBAAyB,CAAC;IAC3E;IACA,MAAM,IAAIE,KAAK,CAAC,mCAAmC,CAAC;EACxD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}