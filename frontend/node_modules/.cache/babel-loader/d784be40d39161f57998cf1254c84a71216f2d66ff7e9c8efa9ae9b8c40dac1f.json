{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import MessageComponent from'./Message.tsx';import{generateQuestion,getProductReport,listAllProducts}from'../api/chat.ts';import'./Chatbot.css';// Create this CSS file\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Chatbot=()=>{const[messages,setMessages]=useState([{sender:'bot',text:\"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\"}]);const[userInput,setUserInput]=useState('');const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const[currentProductId,setCurrentProductId]=useState(null);const[allProducts,setAllProducts]=useState([]);const messagesEndRef=useRef(null);// Scroll to bottom of messages\nuseEffect(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});},[messages]);useEffect(()=>{// Load existing products on component mount\nconst fetchProducts=async()=>{try{const products=await listAllProducts();setAllProducts(products);}catch(err){setError(err.message);}};fetchProducts();},[]);const sendMessage=async()=>{const userText=userInput.trim();if(userText==='')return;// Add user message to UI\nsetMessages(prevMessages=>[...prevMessages,{sender:'user',text:userText}]);setUserInput('');setIsLoading(true);setError(null);try{const response=await generateQuestion(userText,currentProductId);setMessages(prevMessages=>[...prevMessages,{sender:'bot',text:response.question.text}]);setCurrentProductId(response.productId);// Update current product ID\n// Optionally, update the local list of products (for immediate display)\n// You might want to refetch all products or update a specific one\n// For now, let's just refetch all to keep it simple.\nconst updatedProducts=await listAllProducts();setAllProducts(updatedProducts);}catch(err){setError(err.message);setMessages(prevMessages=>[...prevMessages,{sender:'bot',text:\"Oops! Something went wrong: \".concat(err.message,\". Please try again.\")}]);}finally{setIsLoading(false);}};const handleKeyPress=e=>{if(e.key==='Enter'&&!isLoading){sendMessage();}};const viewProductReport=async productId=>{try{const product=await getProductReport(productId);// Display the report in a modal or new section\nalert(\"Product Report for \".concat(product.initialDescription,\":\\n\\n\")+product.details.map(d=>\"- \".concat(d.question,\": \").concat(d.answer,\" (Score: \").concat(d.transparencyScore,\")\")).join('\\n'));}catch(err){setError(err.message);}};const loadExistingProduct=async product=>{setCurrentProductId(product._id);// Clear existing chat and load product's chat history\nconst initialBotMessage={sender:'bot',text:\"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\"};let newMessages=[initialBotMessage,{sender:'user',text:product.initialDescription}];for(const detail of product.details){// Reconstruct the bot's question and the user's answer\nnewMessages.push({sender:'bot',text:detail.question});newMessages.push({sender:'user',text:detail.answer});}setMessages(newMessages);// Fetch the next question for this loaded product\n// This will effectively continue the conversation from where it left off.\nsetIsLoading(true);setError(null);try{// Pass an empty string as userInput to just trigger the next question generation\n// The backend will use the stored history for the specific product ID.\nconst response=await generateQuestion(\"\",product._id);setMessages(prevMessages=>[...prevMessages,{sender:'bot',text:response.question.text}]);// No need to update currentProductId as it's already set\n}catch(err){setError(err.message);setMessages(prevMessages=>[...prevMessages,{sender:'bot',text:\"Oops! Something went wrong loading: \".concat(err.message,\". Please try again.\")}]);}finally{setIsLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"product-list-panel\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Existing Products\"}),/*#__PURE__*/_jsx(\"ul\",{children:allProducts.map(product=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>loadExistingProduct(product),children:product.initialDescription}),/*#__PURE__*/_jsx(\"button\",{className:\"report-btn\",onClick:()=>viewProductReport(product._id),children:\"View Report\"})]},product._id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-panel\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Product Form Bot\"}),currentProductId&&/*#__PURE__*/_jsxs(\"p\",{className:\"current-product-id\",children:[\"Product ID: \",currentProductId]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-messages\",children:[messages.map((msg,index)=>/*#__PURE__*/_jsx(MessageComponent,{message:msg},index)),isLoading&&/*#__PURE__*/_jsx(MessageComponent,{message:{sender:'bot',text:'Generating question...'}}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"userInput\",placeholder:\"Type your product description/answer here...\",value:userInput,onChange:e=>setUserInput(e.target.value),onKeyPress:handleKeyPress,disabled:isLoading}),/*#__PURE__*/_jsx(\"button\",{id:\"sendBtn\",onClick:sendMessage,disabled:isLoading,children:\"Send\"})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",style:{display:'block'},children:error})]})]});};export default Chatbot;","map":{"version":3,"names":["React","useState","useEffect","useRef","MessageComponent","generateQuestion","getProductReport","listAllProducts","jsx","_jsx","jsxs","_jsxs","Chatbot","messages","setMessages","sender","text","userInput","setUserInput","isLoading","setIsLoading","error","setError","currentProductId","setCurrentProductId","allProducts","setAllProducts","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","fetchProducts","products","err","message","sendMessage","userText","trim","prevMessages","response","question","productId","updatedProducts","concat","handleKeyPress","e","key","viewProductReport","product","alert","initialDescription","details","map","d","answer","transparencyScore","join","loadExistingProduct","_id","initialBotMessage","newMessages","detail","push","className","children","onClick","msg","index","ref","type","id","placeholder","value","onChange","target","onKeyPress","disabled","style","display"],"sources":["C:/Users/Monica/Downloads/product-form-altibbe/frontend/src/components/Chatbot.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport MessageComponent from './Message.tsx';\r\nimport { Message, Product, ChatResponse } from '../types';\r\nimport { generateQuestion, getProductReport, listAllProducts } from '../api/chat.ts';\r\nimport './Chatbot.css'; // Create this CSS file\r\n\r\nconst Chatbot: React.FC = () => {\r\n    const [messages, setMessages] = useState<Message[]>([\r\n        { sender: 'bot', text: \"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\" }\r\n    ]);\r\n    const [userInput, setUserInput] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [currentProductId, setCurrentProductId] = useState<string | null>(null);\r\n    const [allProducts, setAllProducts] = useState<Product[]>([]);\r\n    const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n    // Scroll to bottom of messages\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        // Load existing products on component mount\r\n        const fetchProducts = async () => {\r\n            try {\r\n                const products = await listAllProducts();\r\n                setAllProducts(products);\r\n            } catch (err: any) {\r\n                setError(err.message);\r\n            }\r\n        };\r\n        fetchProducts();\r\n    }, []);\r\n\r\n    const sendMessage = async () => {\r\n        const userText = userInput.trim();\r\n        if (userText === '') return;\r\n\r\n        // Add user message to UI\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'user', text: userText }]);\r\n        setUserInput('');\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const response: ChatResponse = await generateQuestion(userText, currentProductId);\r\n\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: response.question.text }]);\r\n            setCurrentProductId(response.productId); // Update current product ID\r\n\r\n            // Optionally, update the local list of products (for immediate display)\r\n            // You might want to refetch all products or update a specific one\r\n            // For now, let's just refetch all to keep it simple.\r\n            const updatedProducts = await listAllProducts();\r\n            setAllProducts(updatedProducts);\r\n\r\n        } catch (err: any) {\r\n            setError(err.message);\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `Oops! Something went wrong: ${err.message}. Please try again.` }]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && !isLoading) {\r\n            sendMessage();\r\n        }\r\n    };\r\n\r\n    const viewProductReport = async (productId: string) => {\r\n        try {\r\n            const product = await getProductReport(productId);\r\n            // Display the report in a modal or new section\r\n            alert(`Product Report for ${product.initialDescription}:\\n\\n` +\r\n                  product.details.map((d:any) => `- ${d.question}: ${d.answer} (Score: ${d.transparencyScore})`).join('\\n')\r\n            );\r\n        } catch (err: any) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n    const loadExistingProduct = async (product: Product) => {\r\n        setCurrentProductId(product._id);\r\n        // Clear existing chat and load product's chat history\r\n        const initialBotMessage = { sender: 'bot', text: \"Hello! Describe your product, and I'll generate some questions for your form. What are you selling?\" };\r\n        let newMessages: Message[] = [initialBotMessage, { sender: 'user', text: product.initialDescription }];\r\n\r\n        for (const detail of product.details) {\r\n            // Reconstruct the bot's question and the user's answer\r\n            newMessages.push({ sender: 'bot', text: detail.question });\r\n            newMessages.push({ sender: 'user', text: detail.answer });\r\n        }\r\n        setMessages(newMessages);\r\n\r\n        // Fetch the next question for this loaded product\r\n        // This will effectively continue the conversation from where it left off.\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n             // Pass an empty string as userInput to just trigger the next question generation\r\n             // The backend will use the stored history for the specific product ID.\r\n            const response: ChatResponse = await generateQuestion(\"\", product._id);\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: response.question.text }]);\r\n            // No need to update currentProductId as it's already set\r\n        } catch (err: any) {\r\n            setError(err.message);\r\n            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `Oops! Something went wrong loading: ${err.message}. Please try again.` }]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <div className=\"product-list-panel\">\r\n                <h3>Existing Products</h3>\r\n                <ul>\r\n                    {allProducts.map((product) => (\r\n                        <li key={product._id}>\r\n                            <button onClick={() => loadExistingProduct(product)}>{product.initialDescription}</button>\r\n                            <button className=\"report-btn\" onClick={() => viewProductReport(product._id)}>View Report</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"chat-panel\">\r\n                <div className=\"chatbot-header\">\r\n                    <h2>Product Form Bot</h2>\r\n                    {currentProductId && <p className=\"current-product-id\">Product ID: {currentProductId}</p>}\r\n                </div>\r\n                <div className=\"chatbot-messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <MessageComponent key={index} message={msg} />\r\n                    ))}\r\n                    {isLoading && <MessageComponent message={{ sender: 'bot', text: 'Generating question...' }} />}\r\n                    <div ref={messagesEndRef} />\r\n                </div>\r\n                <div className=\"chatbot-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"userInput\"\r\n                        placeholder=\"Type your product description/answer here...\"\r\n                        value={userInput}\r\n                        onChange={(e) => setUserInput(e.target.value)}\r\n                        onKeyPress={handleKeyPress}\r\n                        disabled={isLoading}\r\n                    />\r\n                    <button id=\"sendBtn\" onClick={sendMessage} disabled={isLoading}>\r\n                        Send\r\n                    </button>\r\n                </div>\r\n                {error && <div className=\"error-message\" style={{ display: 'block' }}>{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}